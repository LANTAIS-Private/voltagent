name: Repository Sync Diagnostics
on:
  workflow_dispatch:     # Manual trigger only
  
jobs:
  diagnose:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Repository Information
        id: repo_info
        run: |
          echo "=== REPOSITORY DIAGNOSTICS ==="
          echo "Repository: ${{ github.repository }}"
          echo "Default Branch: ${{ github.event.repository.default_branch }}"
          echo "Owner: ${{ github.repository_owner }}"
          
          # Check if this is a fork via API
          REPO_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}")
          
          echo "=== API Response ==="
          echo "$REPO_INFO" | jq '.'
          
          IS_FORK=$(echo "$REPO_INFO" | jq -r '.fork // false')
          PARENT_URL=$(echo "$REPO_INFO" | jq -r '.parent.clone_url // "none"')
          PARENT_FULL_NAME=$(echo "$REPO_INFO" | jq -r '.parent.full_name // "none"')
          
          echo "=== FORK STATUS ==="
          echo "Is Fork: $IS_FORK"
          echo "Parent URL: $PARENT_URL"
          echo "Parent Name: $PARENT_FULL_NAME"
          
          # Check if parent exists and is accessible
          if [ "$PARENT_URL" != "none" ]; then
            echo "=== TESTING PARENT REPOSITORY ==="
            if curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/$PARENT_FULL_NAME" | jq -e '.id' > /dev/null; then
              echo "‚úÖ Parent repository is accessible"
            else
              echo "‚ùå Parent repository is not accessible or doesn't exist"
            fi
          fi
          
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "parent_url=$PARENT_URL" >> $GITHUB_OUTPUT
          echo "parent_name=$PARENT_FULL_NAME" >> $GITHUB_OUTPUT
          
      - name: Check Git Remotes
        run: |
          echo "=== CURRENT GIT REMOTES ==="
          git remote -v
          
          echo "=== LOCAL BRANCHES ==="
          git branch -a
          
          echo "=== RECENT COMMITS ==="
          git log --oneline -10
          
      - name: Test Upstream Connection
        if: steps.repo_info.outputs.is_fork == 'true'
        run: |
          PARENT_URL="${{ steps.repo_info.outputs.parent_url }}"
          PARENT_NAME="${{ steps.repo_info.outputs.parent_name }}"
          
          echo "=== TESTING UPSTREAM CONNECTION ==="
          
          # Add upstream remote
          if git remote | grep -q "upstream"; then
            echo "Upstream remote already exists, removing and re-adding"
            git remote remove upstream
          fi
          
          echo "Adding upstream: $PARENT_URL"
          git remote add upstream "$PARENT_URL"
          
          # Test fetch
          echo "Testing upstream fetch..."
          if git fetch upstream --dry-run 2>&1; then
            echo "‚úÖ Upstream fetch test successful"
            
            # Actually fetch
            git fetch upstream
            
            echo "=== UPSTREAM BRANCHES ==="
            git branch -r | grep upstream
            
            echo "=== UPSTREAM DEFAULT BRANCH ==="
            git remote show upstream | grep 'HEAD branch' || echo "Could not determine HEAD branch"
            
          else
            echo "‚ùå Upstream fetch failed"
            echo "This could be due to:"
            echo "1. Repository is private and not accessible"
            echo "2. Repository has been deleted"
            echo "3. Network connectivity issues"
            echo "4. Authentication problems"
          fi
          
      - name: Check Specific Issues for voltagent
        if: contains(github.repository, 'voltagent')
        run: |
          echo "=== VOLTAGENT SPECIFIC DIAGNOSTICS ==="
          
          # Check if this is the correct voltagent repository
          echo "Repository full name: ${{ github.repository }}"
          
          # Look for package.json or other TypeScript indicators
          if [ -f "package.json" ]; then
            echo "‚úÖ Found package.json - TypeScript project confirmed"
            cat package.json | jq '.name, .description, .version' 2>/dev/null || echo "Invalid JSON in package.json"
          else
            echo "‚ùå No package.json found - may not be a TypeScript project"
          fi
          
          # Check for typical voltagent files
          echo "=== PROJECT STRUCTURE ==="
          ls -la
          
          if [ -d "src" ]; then
            echo "Found src directory:"
            ls -la src/ | head -10
          fi
          
          # Check git history
          echo "=== FORK CREATION DATE ==="
          git log --reverse --oneline | head -5
          
      - name: Permission Check
        run: |
          echo "=== PERMISSION DIAGNOSTICS ==="
          
          # Check token permissions
          TOKEN_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/user")
          
          echo "Token user: $(echo "$TOKEN_INFO" | jq -r '.login')"
          
          # Check repository permissions
          REPO_PERMS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}")
          
          echo "Repository permissions:"
          echo "$REPO_PERMS" | jq '.permissions // "No permission info"'
          
      - name: Summary and Recommendations
        run: |
          echo "=== DIAGNOSTIC SUMMARY ==="
          echo "Repository: ${{ github.repository }}"
          echo "Fork Status: ${{ steps.repo_info.outputs.is_fork }}"
          echo "Parent: ${{ steps.repo_info.outputs.parent_name }}"
          
          if [ "${{ steps.repo_info.outputs.is_fork }}" = "true" ]; then
            echo "‚úÖ Repository is properly configured as a fork"
            echo "üìã NEXT STEPS:"
            echo "1. Check the workflow logs above for any fetch errors"
            echo "2. Verify parent repository is still accessible"
            echo "3. Check if there are branch naming conflicts"
            echo "4. Consider running the enhanced sync workflow"
          else
            echo "‚ùå Repository is not a fork or fork relationship is broken"
            echo "üìã SOLUTIONS:"
            echo "1. Re-fork the repository if the original was deleted"
            echo "2. Manually set up upstream remote if this should be a fork"
            echo "3. Skip sync workflows for non-fork repositories"
          fi
